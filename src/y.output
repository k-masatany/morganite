Terminals unused in grammar

   op_bond


文法

    0 $accept: program $end

    1 program: statement
    2        | program statement

    3 statement: expr newline
    4          | boolexpr newline

    5 expr: number
    6     | "(" expr ")"
    7     | expr op_add expr
    8     | expr op_sub expr
    9     | expr op_mul expr
   10     | expr op_div expr

   11 boolexpr: BOOLEAN
   12         | op_not boolexpr
   13         | boolexpr op_and boolexpr
   14         | boolexpr op_or boolexpr
   15         | boolexpr op_nand boolexpr
   16         | boolexpr op_nor boolexpr
   17         | boolexpr op_xor boolexpr

   18 number: INTEGER
   19       | DOUBLE


出現位置の規則による終端

$end (0) 0
error (256)
INTEGER (258) 18
DOUBLE (259) 19
BOOLEAN (260) 11
newline (261) 3 4
op_add (262) 7
op_sub (263) 8
op_mul (264) 9
op_div (265) 10
op_not (266) 12
op_and (267) 13
op_or (268) 14
op_nand (269) 15
op_nor (270) 16
op_xor (271) 17
op_bond (272)
"(" (273) 6
")" (274) 6


出現位置の規則による非終端

$accept (20)
    左辺: 0
program (21)
    左辺: 1 2, 右辺: 0 2
statement (22)
    左辺: 3 4, 右辺: 1 2
expr (23)
    左辺: 5 6 7 8 9 10, 右辺: 3 6 7 8 9 10
boolexpr (24)
    左辺: 11 12 13 14 15 16 17, 右辺: 4 12 13 14 15 16 17
number (25)
    左辺: 18 19, 右辺: 5


State 0

    0 $accept: . program $end

    INTEGER  shift, and go to state 1
    DOUBLE   shift, and go to state 2
    BOOLEAN  shift, and go to state 3
    op_not   shift, and go to state 4
    "("      shift, and go to state 5

    program    go to state 6
    statement  go to state 7
    expr       go to state 8
    boolexpr   go to state 9
    number     go to state 10


State 1

   18 number: INTEGER .

    $default  reduce using rule 18 (number)


State 2

   19 number: DOUBLE .

    $default  reduce using rule 19 (number)


State 3

   11 boolexpr: BOOLEAN .

    $default  reduce using rule 11 (boolexpr)


State 4

   12 boolexpr: op_not . boolexpr

    BOOLEAN  shift, and go to state 3
    op_not   shift, and go to state 4

    boolexpr  go to state 11


State 5

    6 expr: "(" . expr ")"

    INTEGER  shift, and go to state 1
    DOUBLE   shift, and go to state 2
    "("      shift, and go to state 5

    expr    go to state 12
    number  go to state 10


State 6

    0 $accept: program . $end
    2 program: program . statement

    $end     shift, and go to state 13
    INTEGER  shift, and go to state 1
    DOUBLE   shift, and go to state 2
    BOOLEAN  shift, and go to state 3
    op_not   shift, and go to state 4
    "("      shift, and go to state 5

    statement  go to state 14
    expr       go to state 8
    boolexpr   go to state 9
    number     go to state 10


State 7

    1 program: statement .

    $default  reduce using rule 1 (program)


State 8

    3 statement: expr . newline
    7 expr: expr . op_add expr
    8     | expr . op_sub expr
    9     | expr . op_mul expr
   10     | expr . op_div expr

    newline  shift, and go to state 15
    op_add   shift, and go to state 16
    op_sub   shift, and go to state 17
    op_mul   shift, and go to state 18
    op_div   shift, and go to state 19


State 9

    4 statement: boolexpr . newline
   13 boolexpr: boolexpr . op_and boolexpr
   14         | boolexpr . op_or boolexpr
   15         | boolexpr . op_nand boolexpr
   16         | boolexpr . op_nor boolexpr
   17         | boolexpr . op_xor boolexpr

    newline  shift, and go to state 20
    op_and   shift, and go to state 21
    op_or    shift, and go to state 22
    op_nand  shift, and go to state 23
    op_nor   shift, and go to state 24
    op_xor   shift, and go to state 25


State 10

    5 expr: number .

    $default  reduce using rule 5 (expr)


State 11

   12 boolexpr: op_not boolexpr .
   13         | boolexpr . op_and boolexpr
   14         | boolexpr . op_or boolexpr
   15         | boolexpr . op_nand boolexpr
   16         | boolexpr . op_nor boolexpr
   17         | boolexpr . op_xor boolexpr

    op_and   shift, and go to state 21
    op_or    shift, and go to state 22
    op_nand  shift, and go to state 23
    op_nor   shift, and go to state 24
    op_xor   shift, and go to state 25

    $default  reduce using rule 12 (boolexpr)


State 12

    6 expr: "(" expr . ")"
    7     | expr . op_add expr
    8     | expr . op_sub expr
    9     | expr . op_mul expr
   10     | expr . op_div expr

    op_add  shift, and go to state 16
    op_sub  shift, and go to state 17
    op_mul  shift, and go to state 18
    op_div  shift, and go to state 19
    ")"     shift, and go to state 26


State 13

    0 $accept: program $end .

    $default  accept


State 14

    2 program: program statement .

    $default  reduce using rule 2 (program)


State 15

    3 statement: expr newline .

    $default  reduce using rule 3 (statement)


State 16

    7 expr: expr op_add . expr

    INTEGER  shift, and go to state 1
    DOUBLE   shift, and go to state 2
    "("      shift, and go to state 5

    expr    go to state 27
    number  go to state 10


State 17

    8 expr: expr op_sub . expr

    INTEGER  shift, and go to state 1
    DOUBLE   shift, and go to state 2
    "("      shift, and go to state 5

    expr    go to state 28
    number  go to state 10


State 18

    9 expr: expr op_mul . expr

    INTEGER  shift, and go to state 1
    DOUBLE   shift, and go to state 2
    "("      shift, and go to state 5

    expr    go to state 29
    number  go to state 10


State 19

   10 expr: expr op_div . expr

    INTEGER  shift, and go to state 1
    DOUBLE   shift, and go to state 2
    "("      shift, and go to state 5

    expr    go to state 30
    number  go to state 10


State 20

    4 statement: boolexpr newline .

    $default  reduce using rule 4 (statement)


State 21

   13 boolexpr: boolexpr op_and . boolexpr

    BOOLEAN  shift, and go to state 3
    op_not   shift, and go to state 4

    boolexpr  go to state 31


State 22

   14 boolexpr: boolexpr op_or . boolexpr

    BOOLEAN  shift, and go to state 3
    op_not   shift, and go to state 4

    boolexpr  go to state 32


State 23

   15 boolexpr: boolexpr op_nand . boolexpr

    BOOLEAN  shift, and go to state 3
    op_not   shift, and go to state 4

    boolexpr  go to state 33


State 24

   16 boolexpr: boolexpr op_nor . boolexpr

    BOOLEAN  shift, and go to state 3
    op_not   shift, and go to state 4

    boolexpr  go to state 34


State 25

   17 boolexpr: boolexpr op_xor . boolexpr

    BOOLEAN  shift, and go to state 3
    op_not   shift, and go to state 4

    boolexpr  go to state 35


State 26

    6 expr: "(" expr ")" .

    $default  reduce using rule 6 (expr)


State 27

    7 expr: expr . op_add expr
    7     | expr op_add expr .
    8     | expr . op_sub expr
    9     | expr . op_mul expr
   10     | expr . op_div expr

    op_mul  shift, and go to state 18
    op_div  shift, and go to state 19

    $default  reduce using rule 7 (expr)


State 28

    7 expr: expr . op_add expr
    8     | expr . op_sub expr
    8     | expr op_sub expr .
    9     | expr . op_mul expr
   10     | expr . op_div expr

    op_mul  shift, and go to state 18
    op_div  shift, and go to state 19

    $default  reduce using rule 8 (expr)


State 29

    7 expr: expr . op_add expr
    8     | expr . op_sub expr
    9     | expr . op_mul expr
    9     | expr op_mul expr .
   10     | expr . op_div expr

    $default  reduce using rule 9 (expr)


State 30

    7 expr: expr . op_add expr
    8     | expr . op_sub expr
    9     | expr . op_mul expr
   10     | expr . op_div expr
   10     | expr op_div expr .

    $default  reduce using rule 10 (expr)


State 31

   13 boolexpr: boolexpr . op_and boolexpr
   13         | boolexpr op_and boolexpr .
   14         | boolexpr . op_or boolexpr
   15         | boolexpr . op_nand boolexpr
   16         | boolexpr . op_nor boolexpr
   17         | boolexpr . op_xor boolexpr

    $default  reduce using rule 13 (boolexpr)


State 32

   13 boolexpr: boolexpr . op_and boolexpr
   14         | boolexpr . op_or boolexpr
   14         | boolexpr op_or boolexpr .
   15         | boolexpr . op_nand boolexpr
   16         | boolexpr . op_nor boolexpr
   17         | boolexpr . op_xor boolexpr

    $default  reduce using rule 14 (boolexpr)


State 33

   13 boolexpr: boolexpr . op_and boolexpr
   14         | boolexpr . op_or boolexpr
   15         | boolexpr . op_nand boolexpr
   15         | boolexpr op_nand boolexpr .
   16         | boolexpr . op_nor boolexpr
   17         | boolexpr . op_xor boolexpr

    $default  reduce using rule 15 (boolexpr)


State 34

   13 boolexpr: boolexpr . op_and boolexpr
   14         | boolexpr . op_or boolexpr
   15         | boolexpr . op_nand boolexpr
   16         | boolexpr . op_nor boolexpr
   16         | boolexpr op_nor boolexpr .
   17         | boolexpr . op_xor boolexpr

    $default  reduce using rule 16 (boolexpr)


State 35

   13 boolexpr: boolexpr . op_and boolexpr
   14         | boolexpr . op_or boolexpr
   15         | boolexpr . op_nand boolexpr
   16         | boolexpr . op_nor boolexpr
   17         | boolexpr . op_xor boolexpr
   17         | boolexpr op_xor boolexpr .

    $default  reduce using rule 17 (boolexpr)
